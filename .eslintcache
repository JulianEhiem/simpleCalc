[{"/Users/julianehiem/Desktop/MyFileSystem/Coding/Coding Projects/react-calculator/src/index.js":"1","/Users/julianehiem/Desktop/MyFileSystem/Coding/Coding Projects/react-calculator/src/App.js":"2","/Users/julianehiem/Desktop/MyFileSystem/Coding/Coding Projects/react-calculator/src/reportWebVitals.js":"3"},{"size":501,"mtime":1611922293330,"results":"4","hashOfConfig":"5"},{"size":4069,"mtime":1612018156645,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1610490858286,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"ojsz3n",{"filePath":"11","messages":"12","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/julianehiem/Desktop/MyFileSystem/Coding/Coding Projects/react-calculator/src/index.js",[],["16","17"],"/Users/julianehiem/Desktop/MyFileSystem/Coding/Coding Projects/react-calculator/src/App.js",["18","19","20","21"],"import { useState, Component } from 'react';\nimport './App.css';\nimport { evaluate }  from 'mathjs';\n\n\nfunction Calculator(){\n  return (\n    <div>\n      <Numpad/>\n    </div>\n  );\n}\n// Still figuring out what and how to render a value based on button clicked\n// I already figured the useState bit... Now, What is props?\n\nfunction btnType(x){\n  let btnClass;\n  if(!isNaN(x) || x === '.'){\n    switch(x) {\n      case '1':\n        btnClass = \"Numbers one\";\n        break;\n      case '2':\n        btnClass = \"Numbers two\";\n        break;\n      case '3':\n        btnClass = \"Numbers three\";\n        break;\n      case '4':\n        btnClass = \"Numbers four\";\n          break;\n      case '5':\n        btnClass = \"Numbers five\";\n        break;\n      case '6':\n        btnClass = \"Numbers six\";\n        break;\n      case '7':\n        btnClass = \"Numbers seven\";\n        break;\n      case '8':\n        btnClass = \"Numbers eight\";\n        break;\n      case '9':\n        btnClass = \"Numbers nine\";\n        break;\n      case '0':\n        btnClass = \"Numbers zero\";\n        break;\n      case '.':\n        btnClass = \"Numbers dot\";\n        break;\n    }\n    return btnClass;\n    \n  }else if(x === '+'||x === '-'||x === '/'||x === '*'||x === '='){\n    switch(x) {\n      case '+':\n        btnClass = 'MainOps plus'\n        break;\n      case '-':\n          btnClass = 'MainOps minus'\n          break;\n      case '/':\n        btnClass = 'MainOps divide'\n        break;\n      case '*':\n        btnClass = 'MainOps times'\n        break;\n      case '=':\n        btnClass = 'MainOps equals'\n        break;\n    }\n    return btnClass;\n  }else if(x === 'Clear'||x === '+/-'||x === '%'){\n    switch(x) {\n      case 'Clear':\n        btnClass = 'SpecialOps clear'\n        break;\n      case '+/-':\n          btnClass = 'SpecialOps negate'\n          break;\n      case '%':\n        btnClass = 'SpecialOps percent'\n        break;\n    }\n    return btnClass;\n  }\n}\n\n\nconst Button = props => (\n  <div className= {`NumBtns ${btnType(props.children)}`} id={props.id}\n  onClick={() => props.handleClick(props.children)}>\n    {props.children}\n  </div>\n)\n\nconst Screen = (props) => {\n  return (<div className = \"screen\">{props.screen}</div>)\n  \n}\n\nconst ClearButton = (props) => {\nreturn (<div className = {`NumBtns ${btnType(props.children)}`} onClick={props.handleClear}>{props.children}</div>)\n}\n\nclass Numpad extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: \"\"\n    };\n  }\n\n  addToInput = val => {\n    this.setState({input: this.state.input + val});\n  };\n\n  handleEqual = () => {\n    this.setState({input: evaluate(this.state.input)})\n  }\n  \n  \nrender(){\n  return (\n    <div className=\"App\">\n      <div className=\"calcScreen\"><Screen screen={this.state.input} /></div>\n      <div className=\"Numgrid\">\n        <ClearButton handleClear={()=> this.setState({input: ''})}>Clear</ClearButton>\n        <Button handleClick={this.addToInput}>/</Button>\n        <Button handleClick={this.addToInput}>7</Button>\n        <Button handleClick={this.addToInput}>8</Button>\n        <Button handleClick={this.addToInput}>9</Button>\n        <Button handleClick={this.addToInput}>*</Button>\n        <Button handleClick={this.addToInput}>4</Button>\n        <Button handleClick={this.addToInput}>5</Button>\n        <Button handleClick={this.addToInput}>6</Button>\n        <Button handleClick={this.addToInput}>-</Button>\n        <Button handleClick={this.addToInput}>1</Button>\n        <Button handleClick={this.addToInput}>2</Button>\n        <Button handleClick={this.addToInput}>3</Button>\n        <Button handleClick={this.addToInput}>+</Button>\n        <Button handleClick={this.addToInput}>0</Button>\n        <Button handleClick={this.addToInput}>.</Button>\n        <Button handleClick={() => this.handleEqual()}>=</Button>\n\n      </div>\n    </div>\n  )\n}\n  \n}\n\n\n\n\nfunction App() {\n  return (\n  <div className=\"App\">\n    <div>\n      <h1> This is a calculator app</h1>\n    </div>\n    <div className=\"centerAll\">\n      <Calculator/>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/julianehiem/Desktop/MyFileSystem/Coding/Coding Projects/react-calculator/src/reportWebVitals.js",[],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":1,"column":10,"nodeType":"28","messageId":"29","endLine":1,"endColumn":18},{"ruleId":"30","severity":1,"message":"31","line":19,"column":5,"nodeType":"32","messageId":"33","endLine":53,"endColumn":6},{"ruleId":"30","severity":1,"message":"31","line":57,"column":5,"nodeType":"32","messageId":"33","endLine":73,"endColumn":6},{"ruleId":"30","severity":1,"message":"31","line":76,"column":5,"nodeType":"32","messageId":"33","endLine":86,"endColumn":6},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]