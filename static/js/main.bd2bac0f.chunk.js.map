{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Calculator","btnType","x","btnClass","isNaN","Button","props","className","children","id","onClick","handleClick","Screen","screen","ClearButton","handleClear","Numpad","addToInput","val","setState","input","state","handleEqual","evaluate","this","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd2bac0f.chunk.js","sourcesContent":["import { useState, Component } from 'react';\nimport './App.css';\nimport { evaluate }  from 'mathjs';\n\n\nfunction Calculator(){\n  return (\n    <div>\n      <Numpad/>\n    </div>\n  );\n}\n// Still figuring out what and how to render a value based on button clicked\n// I already figured the useState bit... Now, What is props?\n\nfunction btnType(x){\n  let btnClass;\n  if(!isNaN(x) || x === '.'){\n    switch(x) {\n      case '1':\n        btnClass = \"Numbers one\";\n        break;\n      case '2':\n        btnClass = \"Numbers two\";\n        break;\n      case '3':\n        btnClass = \"Numbers three\";\n        break;\n      case '4':\n        btnClass = \"Numbers four\";\n          break;\n      case '5':\n        btnClass = \"Numbers five\";\n        break;\n      case '6':\n        btnClass = \"Numbers six\";\n        break;\n      case '7':\n        btnClass = \"Numbers seven\";\n        break;\n      case '8':\n        btnClass = \"Numbers eight\";\n        break;\n      case '9':\n        btnClass = \"Numbers nine\";\n        break;\n      case '0':\n        btnClass = \"Numbers zero\";\n        break;\n      case '.':\n        btnClass = \"Numbers dot\";\n        break;\n    }\n    return btnClass;\n    \n  }else if(x === '+'||x === '-'||x === '/'||x === '*'||x === '='){\n    switch(x) {\n      case '+':\n        btnClass = 'MainOps plus'\n        break;\n      case '-':\n          btnClass = 'MainOps minus'\n          break;\n      case '/':\n        btnClass = 'MainOps divide'\n        break;\n      case '*':\n        btnClass = 'MainOps times'\n        break;\n      case '=':\n        btnClass = 'MainOps equals'\n        break;\n    }\n    return btnClass;\n  }else if(x === 'Clear'||x === '+/-'||x === '%'){\n    switch(x) {\n      case 'Clear':\n        btnClass = 'SpecialOps clear'\n        break;\n      case '+/-':\n          btnClass = 'SpecialOps negate'\n          break;\n      case '%':\n        btnClass = 'SpecialOps percent'\n        break;\n    }\n    return btnClass;\n  }\n}\n\n\nconst Button = props => (\n  <div className= {`NumBtns ${btnType(props.children)}`} id={props.id}\n  onClick={() => props.handleClick(props.children)}>\n    {props.children}\n  </div>\n)\n\nconst Screen = (props) => {\n  return (<div className = \"screen\">{props.screen}</div>)\n  \n}\n\nconst ClearButton = (props) => {\nreturn (<div className = {`NumBtns ${btnType(props.children)}`} onClick={props.handleClear}>{props.children}</div>)\n}\n\nclass Numpad extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: \"\"\n    };\n  }\n\n  addToInput = val => {\n    this.setState({input: this.state.input + val});\n  };\n\n  handleEqual = () => {\n    this.setState({input: evaluate(this.state.input)})\n  }\n  \n  \nrender(){\n  return (\n    <div className=\"App\">\n      <div className=\"calcScreen\"><Screen screen={this.state.input} /></div>\n      <div className=\"Numgrid\">\n        <ClearButton handleClear={()=> this.setState({input: ''})}>Clear</ClearButton>\n        <Button handleClick={this.addToInput}>/</Button>\n        <Button handleClick={this.addToInput}>7</Button>\n        <Button handleClick={this.addToInput}>8</Button>\n        <Button handleClick={this.addToInput}>9</Button>\n        <Button handleClick={this.addToInput}>*</Button>\n        <Button handleClick={this.addToInput}>4</Button>\n        <Button handleClick={this.addToInput}>5</Button>\n        <Button handleClick={this.addToInput}>6</Button>\n        <Button handleClick={this.addToInput}>-</Button>\n        <Button handleClick={this.addToInput}>1</Button>\n        <Button handleClick={this.addToInput}>2</Button>\n        <Button handleClick={this.addToInput}>3</Button>\n        <Button handleClick={this.addToInput}>+</Button>\n        <Button handleClick={this.addToInput}>0</Button>\n        <Button handleClick={this.addToInput}>.</Button>\n        <Button handleClick={() => this.handleEqual()}>=</Button>\n\n      </div>\n    </div>\n  )\n}\n  \n}\n\n\n\n\nfunction App() {\n  return (\n  <div className=\"App\">\n    <div>\n      <h1> This is a calculator app</h1>\n    </div>\n    <div className=\"centerAll\">\n      <Calculator/>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}